name: traceability-comments-trigger

permissions:
  checks: write
  pull-requests: read

on:
  issue_comment:
    types:
      - created
      - edited
      - deleted

jobs:
  traceability-comments-trigger:
    runs-on: ubuntu-latest
    if: github.event.issue.pull_request
    steps:
      - name: "Get Pull Request for Comment"
        uses: actions/github-script@v6
        id: get-commit
        with:
          script: |
            const request = {
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number
            }
            core.info(`Getting PR #${request.pull_number} from ${request.owner}/${request.repo}`)
            try {
              const result = await github.rest.pulls.get(request)
              return result.data
            } catch (err) {
              core.setFailed(`Request failed with error ${err}`)
            }
      - name: "Get Check Run For Pull Request"
        uses: actions/github-script@v6
        id: get-check-runs
        with:
          script: |
            const request = {
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: `${{ fromJSON(steps.get-commit.outputs.result).head.sha }}`,
              check_name: 'traceability-commentsfoo'
            }
            core.info(`Getting check-suites for ${request.ref} from ${request.owner}/${request.repo}`)
            try {
              const result = await github.rest.checks.listForRef(request)
              if (result.data.check_runs.length > 0) {
                return result.data.check_runs[0]
              }
            } catch (err) {
              core.setFailed(`Request failed with error ${err}`)
            }
      - name: "Cancel Check Run"
        id: cancel-check-run
        uses: actions/github-script@v6
        with:
          script: |
            const checkRunId = `${{ fromJSON(steps.get-check-runs.outputs.result).id }}`
            const checkRunStatus = `${{ fromJSON(steps.get-check-runs.outputs.result).status }}` 
            const request = {
              owner: context.repo.owner,
              repo: context.repo.repo,
              check_run_id: checkRunId,
              conclusion: 'cancelled',
              output: {
                title: 'Cancelled.',
                summary: 'Check Run cancelled by "traceability-comments-trigger.yaml".', 
              }
            }
            if (checkRunStatus !== 'completed') {
              core.info(`Cancelling check-run ${checkRunId} from ${request.owner}/${request.repo}`)        
              try {
                await github.rest.checks.update(request)
              } catch {
                core.setFailed(`Request failed with error ${err}`)
              }
            } else {
              core.info(`No need to cancel check-run ${checkRunId}`)
            }
      - name: "Re-request Check Suite"
        id: rerequest-check-suite
        uses: actions/github-script@v6
        with:
          script: |
            const checkSuiteId = `${{ fromJSON(steps.get-check-runs.outputs.result).check_suite.id }}` 
            const request = {
              owner: context.repo.owner,
              repo: context.repo.repo,
              check_suite_id: checkSuiteId
            }
            try {
              core.info(`Re-requesting check-suite ${request.check_suite_id} from ${request.owner}/${request.repo}`)
              await github.rest.checks.rerequestSuite(request)
            } catch (err) {
              // we cancelled any running check-suite in the step before this one, so if we get an error here saying
              // a check-suite is already re-running it means something else triggered it to rerun between this step
              // and the last. That is what we wanted to do anyways, so we can ignore these errors.
              if (err.response.data.message === 'This check suite is already re-running.') {
                return
              }
              core.setFailed(`Request failed with error ${err}`)
            }
